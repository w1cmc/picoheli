;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program tx1wire
.side_set 1 opt

; An 8n1 UART transmit program.
; OUT pin 0 and side-set pin 0 are both mapped to UART TX pin.

    set pindirs 1
.wrap_target
    pull       side 1 [7]  ; Assert stop bit, or stall with line in idle state
    set x, 7   side 0 [7]  ; Preload bit counter, assert start bit for 8 clocks
bitloop:                   ; This loop will run 8 times (8n1 UART)
    out pins, 1            ; Shift 1 bit from OSR to the first OUT pin
    jmp x-- bitloop   [6]  ; Each loop iteration is 8 cycles.
.wrap

% c-sdk {
#include "hardware/clocks.h"

static inline void tx1wire_program_init(PIO pio, uint sm, uint offset, uint pin_tx, uint baud) {
    gpio_pull_up(pin_tx);
    pio_gpio_init(pio, pin_tx);

    pio_sm_config c = tx1wire_program_get_default_config(offset);

    // pin configuration: it's really just one wire.
    sm_config_set_out_pins(&c, pin_tx, 1);
    sm_config_set_set_pins(&c, pin_tx, 1);
    sm_config_set_sideset_pins(&c, pin_tx);
    sm_config_set_in_pins(&c, pin_tx);

    // OUT shifts to right, no autopull
    sm_config_set_out_shift(&c, true, false, 32);

    // SM transmits 1 bit per 8 execution cycles.
    float div = (float)clock_get_hz(clk_sys) / (8 * baud);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
