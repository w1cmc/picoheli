.program onewire
.side_set 1 opt
.define PUBLIC tx_offset txstart
.define PUBLIC rx_offset rxstart
.define PUBLIC tx_pull txloop
txstart:
    set pindirs 1 side 1 [6]
txloop:
    pull
    nop side 1 [7] ; stretch the stop bit
    nop side 1 [7]
    set x 7 side 0 [7]
txbitloop:
    out pins 1
    jmp x-- txbitloop [6]
    jmp txloop side 1 [6]
rxstart:
    set pindirs 0
.wrap_target
rxloop:
    wait 0 pin 0 [3]       ; Stall until start bit is asserted
    set x, 7    [7]     ; Preload bit counter, then delay until halfway through
rxbitloop:              ; the first data bit (12 cycles incl wait, set).
    in pins, 1          ; Shift data bit into ISR
    jmp x-- rxbitloop [6] ; Loop 8 times, each loop iteration is 8 cycles
    jmp pin rxstop      ; Check stop bit (should be high)
                        ; Either a framing error or a break.
    wait 1 pin 0        ; Wait for line to return to idle state.
    jmp rxloop          ; Don't push data if we didn't see good framing.
rxstop:                 ; No delay before returning to start; a little slack is
    push                ; important in case the TX clock is slightly too fast.
.wrap

% c-sdk {
#include "hardware/clocks.h"

static inline void onewire_program_init(PIO pio, uint sm, uint offset, uint pin_tx, uint baud) {
    pio_sm_config c = onewire_program_get_default_config(offset);

    // pin configuration: it's really just one wire.
    sm_config_set_out_pins(&c, pin_tx, 1);
    sm_config_set_set_pins(&c, pin_tx, 1);
    sm_config_set_sideset_pins(&c, pin_tx);
    sm_config_set_in_pins(&c, pin_tx);
    sm_config_set_jmp_pin(&c, pin_tx);

    // OUT shifts to right, no autopull
    sm_config_set_out_shift(&c, true, false, 32);

    // SM transmits 1 bit per 8 execution cycles.
    float div = (float)clock_get_hz(clk_sys) / (8 * baud);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
